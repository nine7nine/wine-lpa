--- wine-1.5.30/server/fd.c.orig	2013-05-19 12:09:40.630802008 -0400
+++ wine-1.5.30/server/fd.c	2013-05-19 12:16:31.714777506 -0400
@@ -1488,32 +1488,32 @@
     fd->access = access;
     fd->sharing = sharing;
 
+    if (!(access & (FILE_READ_DATA | FILE_WRITE_DATA | DELETE)))
+        return 0;
+
     LIST_FOR_EACH( ptr, &fd->inode->open )
     {
         struct fd *fd_ptr = LIST_ENTRY( ptr, struct fd, inode_entry );
         if (fd_ptr != fd)
         {
-            /* if access mode is 0, sharing mode is ignored */
-            if (fd_ptr->access & all_access) existing_sharing &= fd_ptr->sharing;
+            if (fd_ptr->access & (FILE_READ_DATA | FILE_WRITE_DATA | DELETE))
+                existing_sharing &= fd_ptr->sharing;
             existing_access |= fd_ptr->access;
         }
     }
 
-    if (((access & read_access) && !(existing_sharing & FILE_SHARE_READ)) ||
-        ((access & write_access) && !(existing_sharing & FILE_SHARE_WRITE)) ||
+    if (((access & FILE_READ_DATA) && !(existing_sharing & FILE_SHARE_READ)) ||
+        ((access & FILE_WRITE_DATA) && !(existing_sharing & FILE_SHARE_WRITE)) ||
         ((access & DELETE) && !(existing_sharing & FILE_SHARE_DELETE)))
         return STATUS_SHARING_VIOLATION;
-    if (((existing_access & FILE_MAPPING_WRITE) && !(sharing & FILE_SHARE_WRITE)) ||
-        ((existing_access & FILE_MAPPING_IMAGE) && (access & FILE_WRITE_DATA)))
+    if ((existing_access & FILE_MAPPING_IMAGE) && (access & FILE_WRITE_DATA))
         return STATUS_SHARING_VIOLATION;
     if ((existing_access & FILE_MAPPING_IMAGE) && (options & FILE_DELETE_ON_CLOSE))
         return STATUS_CANNOT_DELETE;
     if ((existing_access & FILE_MAPPING_ACCESS) && (open_flags & O_TRUNC))
         return STATUS_USER_MAPPED_FILE;
-    if (!(access & all_access))
-        return 0;  /* if access mode is 0, sharing mode is ignored (except for mappings) */
-    if (((existing_access & read_access) && !(sharing & FILE_SHARE_READ)) ||
-        ((existing_access & write_access) && !(sharing & FILE_SHARE_WRITE)) ||
+    if (((existing_access & FILE_READ_DATA) && !(sharing & FILE_SHARE_READ)) ||
+        ((existing_access & FILE_WRITE_DATA) && !(sharing & FILE_SHARE_WRITE)) ||
         ((existing_access & DELETE) && !(sharing & FILE_SHARE_DELETE)))
         return STATUS_SHARING_VIOLATION;
     return 0;
