--- wine/include/winbase.h	2013-10-09 23:06:05.580141951 -0400
+++ wine/include/winebase.h	2013-10-09 23:31:58.389222059 -0400
@@ -1112,6 +1112,19 @@
 #define THREAD_PRIORITY_TIME_CRITICAL   THREAD_BASE_PRIORITY_LOWRT
 #define THREAD_PRIORITY_IDLE            THREAD_BASE_PRIORITY_IDLE
 
+/* L_pa - add/declare more thread priorities to be used with Wine-rt, but internally in Wine / Winelib
+
+   These are marked with "HiTHREAD_*" and "lowTHREAD_*", which map +2/-2 prio from the base of their particular THREAD_PRIORITY_* in WinAPI. 
+
+* Non-Windows options for THREAD_PRIORITY_* (as used by SetThreadPriority/GetThreadPriority) */
+
+#define lowTHREAD_PRIORITY_ABOVE_NORMAL   60
+#define hiTHREAD_PRIORITY_ABOVE_NORMAL    61
+#define lowTHREAD_PRIORITY_HIGHEST        62
+#define hiTHREAD_PRIORITY_HIGHEST         63
+#define lowTHREAD_PRIORITY_TIME_CRITICAL  64
+#define hiTHREAD_PRIORITY_TIME_CRITICAL   65
+
 /* flags to FormatMessage */
 #define	FORMAT_MESSAGE_ALLOCATE_BUFFER	0x00000100
 #define	FORMAT_MESSAGE_IGNORE_INSERTS	0x00000200
--- wine/server/thread.c	2013-10-09 23:06:05.601141000 -0400
+++ wine/server/thread.c	2013-10-09 23:40:00.402246926 -0400
@@ -477,21 +477,51 @@
 
     switch (priority)
     {
+      case hiTHREAD_PRIORITY_TIME_CRITICAL:
+        param.sched_priority = base_rt_priority + 14;
+        policy = SCHED_FIFO;
+        fprintf( stderr, "Thread %i at hiTHREAD_PRIORITY_TIME_CRITICAL set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
+        break;
       case THREAD_PRIORITY_TIME_CRITICAL:
-        param.sched_priority = base_rt_priority + 10;
+        param.sched_priority = base_rt_priority + 12;
         policy = SCHED_FIFO;
         fprintf( stderr, "Thread %i at THREAD_PRIORITY_TIME_CRITICAL set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
         break;
+      case lowTHREAD_PRIORITY_TIME_CRITICAL:
+        param.sched_priority = base_rt_priority + 10;
+        policy = SCHED_FIFO;
+        fprintf( stderr, "Thread %i at lowTHREAD_PRIORITY_TIME_CRITICAL set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
+        break;
+      case hiTHREAD_PRIORITY_HIGHEST:
+        param.sched_priority = base_rt_priority + 8;
+        policy = SCHED_FIFO;
+        fprintf( stderr, "Thread %i at hiTHREAD_PRIORITY_HIGHEST set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
+        break;
       case THREAD_PRIORITY_HIGHEST:
-        param.sched_priority = base_rt_priority + 5;
+        param.sched_priority = base_rt_priority + 6;
         policy = SCHED_FIFO;
         fprintf( stderr, "Thread %i at THREAD_PRIORITY_HIGHEST set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
         break;
+      case lowTHREAD_PRIORITY_HIGHEST:
+        param.sched_priority = base_rt_priority + 4;
+        policy = SCHED_FIFO;
+        fprintf( stderr, "Thread %i at lowTHREAD_PRIORITY_HIGHEST set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
+        break;
+      case hiTHREAD_PRIORITY_ABOVE_NORMAL:
+        param.sched_priority = base_rt_priority + 2;
+        policy = SCHED_FIFO;
+        fprintf( stderr, "Thread %i at hiTHREAD_PRIORITY_ABOVE_NORMAL set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
+        break;
       case THREAD_PRIORITY_ABOVE_NORMAL:
-        param.sched_priority = base_rt_priority;
+        param.sched_priority = base_rt_priority + 1;
         policy = SCHED_FIFO;
         fprintf( stderr, "Thread %i at THREAD_PRIORITY_ABOVE_NORMAL set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
         break;
+      case lowTHREAD_PRIORITY_ABOVE_NORMAL:
+        param.sched_priority = base_rt_priority;
+        policy = SCHED_FIFO;
+        fprintf( stderr, "Thread %i at lowTHREAD_PRIORITY_ABOVE_NORMAL set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
+        break;
       case THREAD_PRIORITY_NORMAL:
         param.sched_priority = 0;
         policy = SCHED_NORMAL;
